{"version":3,"file":"static/chunks/pages/file-manager-19c4e0f774fba8c7.js","mappings":"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","sources":["webpack://_N_E/?03b4","webpack://_N_E/./src/pages/file-manager.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/file-manager\",\n      function () {\n        return require(\"private-next-pages/file-manager.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/file-manager\"])\n      });\n    }\n  ","import {\r\n    Breadcrumb,\r\n    ContextualMenu,\r\n    ContextualMenuItem,\r\n    DetailsListLayoutMode,\r\n    Dialog,\r\n    DirectionalHint,\r\n    IBreadcrumbItem,\r\n    IColumn,\r\n    IContextualMenuItem,\r\n    IDetailsHeaderProps,\r\n    IRenderFunction,\r\n    Icon,\r\n    Layer,\r\n    MarqueeSelection,\r\n    Overlay,\r\n    ProgressIndicator,\r\n    Selection,\r\n    ShimmeredDetailsList,\r\n    Stack,\r\n    StackItem,\r\n    concatStyleSets,\r\n    mergeStyleSets,\r\n} from \"@fluentui/react\";\r\nimport {\r\n    FileIconType,\r\n    getFileTypeIconProps,\r\n    initializeFileTypeIcons,\r\n} from \"@fluentui/react-file-type-icons\";\r\nimport { useConst } from \"@fluentui/react-hooks\";\r\nimport { getIcon } from \"@fluentui/style-utilities\";\r\nimport {\r\n    AdbFeature,\r\n    AdbSync,\r\n    LinuxFileType,\r\n    type AdbSyncEntry,\r\n} from \"@yume-chan/adb\";\r\nimport { WrapConsumableStream, WritableStream } from \"@yume-chan/stream-extra\";\r\nimport { EMPTY_UINT8_ARRAY } from \"@yume-chan/struct\";\r\nimport { Zip, ZipPassThrough } from \"fflate\";\r\nimport {\r\n    action,\r\n    autorun,\r\n    makeAutoObservable,\r\n    observable,\r\n    runInAction,\r\n} from \"mobx\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { NextPage } from \"next\";\r\nimport Head from \"next/head\";\r\nimport Router, { useRouter } from \"next/router\";\r\nimport path from \"path\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { CommandBar, NoSsr } from \"../components\";\r\nimport { GLOBAL_STATE } from \"../state\";\r\nimport {\r\n    Icons,\r\n    ProgressStream,\r\n    RouteStackProps,\r\n    asyncEffect,\r\n    createFileStream,\r\n    formatSize,\r\n    formatSpeed,\r\n    pickFile,\r\n    saveFile,\r\n} from \"../utils\";\r\n\r\ninitializeFileTypeIcons();\r\n\r\ninterface ListItem extends AdbSyncEntry {\r\n    key: string;\r\n}\r\n\r\nfunction toListItem(item: AdbSyncEntry): ListItem {\r\n    (item as ListItem).key = item.name;\r\n    return item as ListItem;\r\n}\r\n\r\nconst classNames = mergeStyleSets({\r\n    name: {\r\n        cursor: \"pointer\",\r\n        \"&:hover\": {\r\n            textDecoration: \"underline\",\r\n        },\r\n    },\r\n});\r\n\r\nconst renderDetailsHeader: IRenderFunction<IDetailsHeaderProps> = (\r\n    props?,\r\n    defaultRender?\r\n) => {\r\n    if (!props || !defaultRender) {\r\n        return null;\r\n    }\r\n\r\n    return defaultRender({\r\n        ...props,\r\n        styles: concatStyleSets(props.styles, { root: { paddingTop: 0 } }),\r\n    });\r\n};\r\n\r\nfunction compareCaseInsensitively(a: string, b: string) {\r\n    let result = a.toLocaleLowerCase().localeCompare(b.toLocaleLowerCase());\r\n    if (result !== 0) {\r\n        return result;\r\n    } else {\r\n        return a.localeCompare(b);\r\n    }\r\n}\r\n\r\nclass FileManagerState {\r\n    initial = true;\r\n    visible = false;\r\n    path = \"/\";\r\n    loading = false;\r\n    items: ListItem[] = [];\r\n    sortKey: keyof ListItem = \"name\";\r\n    sortDescending = false;\r\n\r\n    uploading = false;\r\n    uploadPath: string | undefined = undefined;\r\n    uploadedSize = 0;\r\n    uploadTotalSize = 0;\r\n    debouncedUploadedSize = 0;\r\n    uploadSpeed = 0;\r\n\r\n    selectedItems: ListItem[] = [];\r\n    contextMenuTarget: MouseEvent | undefined = undefined;\r\n\r\n    get breadcrumbItems(): IBreadcrumbItem[] {\r\n        let part = \"\";\r\n        const list: IBreadcrumbItem[] = this.path\r\n            .split(\"/\")\r\n            .filter(Boolean)\r\n            .map((segment) => {\r\n                part += \"/\" + segment;\r\n                return {\r\n                    key: part,\r\n                    text: segment,\r\n                    onClick: (e, item) => {\r\n                        if (!item) {\r\n                            return;\r\n                        }\r\n                        this.pushPathQuery(item.key);\r\n                    },\r\n                };\r\n            });\r\n        list.unshift({\r\n            key: \"/\",\r\n            text: \"Device\",\r\n            onClick: () => this.pushPathQuery(\"/\"),\r\n        });\r\n        list[list.length - 1].isCurrentItem = true;\r\n        delete list[list.length - 1].onClick;\r\n        return list;\r\n    }\r\n\r\n    get menuItems() {\r\n        let result: IContextualMenuItem[] = [];\r\n\r\n        switch (this.selectedItems.length) {\r\n            case 0:\r\n                result.push({\r\n                    key: \"upload\",\r\n                    text: \"Upload\",\r\n                    iconProps: {\r\n                        iconName: Icons.CloudArrowUp,\r\n                        style: { height: 20, fontSize: 20, lineHeight: 1.5 },\r\n                    },\r\n                    disabled: !GLOBAL_STATE.adb,\r\n                    onClick: () => {\r\n                        (async () => {\r\n                            const files = await pickFile({ multiple: true });\r\n                            for (let i = 0; i < files.length; i++) {\r\n                                const file = files.item(i)!;\r\n                                await this.upload(file);\r\n                            }\r\n                        })();\r\n\r\n                        return false;\r\n                    },\r\n                });\r\n                break;\r\n            default:\r\n                result.push(\r\n                    {\r\n                        key: \"download\",\r\n                        text: \"Download\",\r\n                        iconProps: {\r\n                            iconName: Icons.CloudArrowDown,\r\n                            style: {\r\n                                height: 20,\r\n                                fontSize: 20,\r\n                                lineHeight: 1.5,\r\n                            },\r\n                        },\r\n                        onClick: () => {\r\n                            void this.download();\r\n                            return false;\r\n                        },\r\n                    },\r\n                    {\r\n                        key: \"delete\",\r\n                        text: \"Delete\",\r\n                        iconProps: {\r\n                            iconName: Icons.Delete,\r\n                            style: {\r\n                                height: 20,\r\n                                fontSize: 20,\r\n                                lineHeight: 1.5,\r\n                            },\r\n                        },\r\n                        onClick: () => {\r\n                            (async () => {\r\n                                try {\r\n                                    for (const item of this.selectedItems) {\r\n                                        const output =\r\n                                            await GLOBAL_STATE.adb!.rm(\r\n                                                path.resolve(\r\n                                                    this.path,\r\n                                                    item.name!\r\n                                                )\r\n                                            );\r\n                                        if (output) {\r\n                                            GLOBAL_STATE.showErrorDialog(\r\n                                                output\r\n                                            );\r\n                                            return;\r\n                                        }\r\n                                    }\r\n                                } catch (e: any) {\r\n                                    GLOBAL_STATE.showErrorDialog(e);\r\n                                } finally {\r\n                                    this.loadFiles();\r\n                                }\r\n                            })();\r\n                            return false;\r\n                        },\r\n                    }\r\n                );\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get sortedList() {\r\n        const list = this.items.slice();\r\n        list.sort((a, b) => {\r\n            const aIsFile = a.type === LinuxFileType.File ? 1 : 0;\r\n            const bIsFile = b.type === LinuxFileType.File ? 1 : 0;\r\n\r\n            let result: number;\r\n            if (aIsFile !== bIsFile) {\r\n                result = aIsFile - bIsFile;\r\n            } else {\r\n                const aSortKey = a[this.sortKey]!;\r\n                const bSortKey = b[this.sortKey]!;\r\n\r\n                if (aSortKey === bSortKey) {\r\n                    // use name as tie breaker\r\n                    result = compareCaseInsensitively(a.name!, b.name!);\r\n                } else if (typeof aSortKey === \"string\") {\r\n                    result = compareCaseInsensitively(\r\n                        aSortKey,\r\n                        bSortKey as string\r\n                    );\r\n                } else {\r\n                    result =\r\n                        (aSortKey as number) < (bSortKey as number) ? -1 : 1;\r\n                }\r\n            }\r\n\r\n            if (this.sortDescending) {\r\n                result *= -1;\r\n            }\r\n            return result;\r\n        });\r\n        return list;\r\n    }\r\n\r\n    get columns(): IColumn[] {\r\n        const ICON_SIZE = 20;\r\n\r\n        const list: IColumn[] = [\r\n            {\r\n                key: \"type\",\r\n                name: \"File Type\",\r\n                iconName: Icons.Document20,\r\n                isIconOnly: true,\r\n                minWidth: ICON_SIZE,\r\n                maxWidth: ICON_SIZE,\r\n                isCollapsible: true,\r\n                onRender(item: AdbSyncEntry) {\r\n                    let iconName: string;\r\n\r\n                    switch (item.type) {\r\n                        case LinuxFileType.Link:\r\n                            // larger sizes of `linkedFolder` icon now have a person symbol on it,\r\n                            // We want to use it for symbolic links, so use the 16px version\r\n                            // cspell:disable-next-line\r\n                            iconName = \"linkedfolder16_svg\";\r\n                            break;\r\n                        case LinuxFileType.Directory:\r\n                            ({ iconName } = getFileTypeIconProps({\r\n                                type: FileIconType.folder,\r\n                            }));\r\n                            break;\r\n                        case LinuxFileType.File:\r\n                            ({ iconName } = getFileTypeIconProps({\r\n                                extension: path.extname(item.name!),\r\n                            }));\r\n                            break;\r\n                        default:\r\n                            ({ iconName } = getFileTypeIconProps({\r\n                                type: FileIconType.genericFile,\r\n                            }));\r\n                            break;\r\n                    }\r\n\r\n                    // `@fluentui/react-file-type-icons` doesn't export icon src.\r\n                    const iconSrc = (\r\n                        getIcon(iconName)!.code as unknown as JSX.Element\r\n                    ).props.src;\r\n                    return (\r\n                        <Icon\r\n                            imageProps={{\r\n                                crossOrigin: \"anonymous\",\r\n                                src: iconSrc,\r\n                            }}\r\n                            style={{ width: ICON_SIZE, height: ICON_SIZE }}\r\n                        />\r\n                    );\r\n                },\r\n            },\r\n            {\r\n                key: \"name\",\r\n                name: \"Name\",\r\n                minWidth: 0,\r\n                isRowHeader: true,\r\n                onRender(item: AdbSyncEntry) {\r\n                    return (\r\n                        <span className={classNames.name} data-selection-invoke>\r\n                            {item.name}\r\n                        </span>\r\n                    );\r\n                },\r\n            },\r\n            {\r\n                key: \"permission\",\r\n                name: \"Permission\",\r\n                minWidth: 0,\r\n                isCollapsible: true,\r\n                onRender(item: AdbSyncEntry) {\r\n                    return `${((item.mode >> 6) & 0b100).toString(8)}${(\r\n                        (item.mode >> 3) &\r\n                        0b100\r\n                    ).toString(8)}${(item.mode & 0b100).toString(8)}`;\r\n                },\r\n            },\r\n            {\r\n                key: \"size\",\r\n                name: \"Size\",\r\n                minWidth: 0,\r\n                isCollapsible: true,\r\n                onRender(item: AdbSyncEntry) {\r\n                    if (item.type === LinuxFileType.File) {\r\n                        return formatSize(Number(item.size));\r\n                    }\r\n                    return \"\";\r\n                },\r\n            },\r\n            {\r\n                key: \"mtime\",\r\n                name: \"Last Modified Time\",\r\n                minWidth: 150,\r\n                isCollapsible: true,\r\n                onRender(item: AdbSyncEntry) {\r\n                    return new Date(Number(item.mtime) * 1000).toLocaleString();\r\n                },\r\n            },\r\n        ];\r\n\r\n        if (GLOBAL_STATE.adb?.supportsFeature(AdbFeature.ListV2)) {\r\n            list.push(\r\n                {\r\n                    key: \"ctime\",\r\n                    name: \"Creation Time\",\r\n                    minWidth: 150,\r\n                    isCollapsible: true,\r\n                    onRender(item: AdbSyncEntry) {\r\n                        return new Date(\r\n                            Number(item.ctime!) * 1000\r\n                        ).toLocaleString();\r\n                    },\r\n                },\r\n                {\r\n                    key: \"atime\",\r\n                    name: \"Last Access Time\",\r\n                    minWidth: 150,\r\n                    isCollapsible: true,\r\n                    onRender(item: AdbSyncEntry) {\r\n                        return new Date(\r\n                            Number(item.atime!) * 1000\r\n                        ).toLocaleString();\r\n                    },\r\n                }\r\n            );\r\n        }\r\n\r\n        for (const item of list) {\r\n            item.onColumnClick = (e, column) => {\r\n                if (this.sortKey === column.key) {\r\n                    runInAction(\r\n                        () => (this.sortDescending = !this.sortDescending)\r\n                    );\r\n                } else {\r\n                    runInAction(() => {\r\n                        this.sortKey = column.key as keyof ListItem;\r\n                        this.sortDescending = false;\r\n                    });\r\n                }\r\n            };\r\n\r\n            if (item.key === this.sortKey) {\r\n                item.isSorted = true;\r\n                item.isSortedDescending = this.sortDescending;\r\n            }\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this, {\r\n            initial: false,\r\n            items: observable.shallow,\r\n            pushPathQuery: false,\r\n            changeDirectory: action.bound,\r\n            loadFiles: false,\r\n        });\r\n\r\n        autorun(() => {\r\n            if (GLOBAL_STATE.adb) {\r\n                if (this.initial && this.visible) {\r\n                    this.initial = false;\r\n                    this.loadFiles();\r\n                }\r\n            } else {\r\n                this.initial = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    private getFileStream(sync: AdbSync, basePath: string, name: string) {\r\n        return sync.read(path.resolve(basePath, name));\r\n    }\r\n\r\n    private async addDirectory(\r\n        sync: AdbSync,\r\n        zip: Zip,\r\n        basePath: string,\r\n        relativePath: string\r\n    ) {\r\n        if (relativePath !== \".\") {\r\n            // Add empty directory\r\n            const file = new ZipPassThrough(relativePath + \"/\");\r\n            zip.add(file);\r\n            file.push(EMPTY_UINT8_ARRAY, true);\r\n        }\r\n\r\n        for (const entry of await sync.readdir(\r\n            path.resolve(basePath, relativePath)\r\n        )) {\r\n            if (entry.name === \".\" || entry.name === \"..\") {\r\n                continue;\r\n            }\r\n\r\n            switch (entry.type) {\r\n                case LinuxFileType.Directory:\r\n                    await this.addDirectory(\r\n                        sync,\r\n                        zip,\r\n                        basePath,\r\n                        path.resolve(relativePath, entry.name)\r\n                    );\r\n                    break;\r\n                case LinuxFileType.File:\r\n                    await this.addFile(\r\n                        sync,\r\n                        zip,\r\n                        basePath,\r\n                        path.resolve(relativePath, entry.name)\r\n                    );\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async addFile(\r\n        sync: AdbSync,\r\n        zip: Zip,\r\n        basePath: string,\r\n        name: string\r\n    ) {\r\n        const file = new ZipPassThrough(name);\r\n        zip.add(file);\r\n        await this.getFileStream(sync, basePath, name).pipeTo(\r\n            new WritableStream({\r\n                write(chunk) {\r\n                    file.push(chunk);\r\n                },\r\n                close() {\r\n                    file.push(EMPTY_UINT8_ARRAY, true);\r\n                },\r\n            })\r\n        );\r\n    }\r\n\r\n    private async download() {\r\n        const sync = await GLOBAL_STATE.adb!.sync();\r\n        try {\r\n            if (this.selectedItems.length === 1) {\r\n                const item = this.selectedItems[0];\r\n                switch (item.type) {\r\n                    case LinuxFileType.Directory: {\r\n                        const stream = saveFile(\r\n                            `${this.selectedItems[0].name}.zip`\r\n                        );\r\n                        const writer = stream.getWriter();\r\n                        const zip = new Zip((err, data, final) => {\r\n                            writer.write(data);\r\n                            if (final) {\r\n                                writer.close();\r\n                            }\r\n                        });\r\n                        await this.addDirectory(\r\n                            sync,\r\n                            zip,\r\n                            path.resolve(this.path, item.name),\r\n                            \".\"\r\n                        );\r\n                        zip.end();\r\n                        break;\r\n                    }\r\n                    case LinuxFileType.File:\r\n                        await this.getFileStream(\r\n                            sync,\r\n                            this.path,\r\n                            item.name\r\n                        ).pipeTo(saveFile(item.name, Number(item.size)));\r\n                        break;\r\n                }\r\n                return;\r\n            }\r\n\r\n            const stream = saveFile(`${path.basename(this.path)}.zip`);\r\n            const writer = stream.getWriter();\r\n            const zip = new Zip((err, data, final) => {\r\n                writer.write(data);\r\n                if (final) {\r\n                    writer.close();\r\n                }\r\n            });\r\n            for (const item of this.selectedItems) {\r\n                switch (item.type) {\r\n                    case LinuxFileType.Directory:\r\n                        await this.addDirectory(\r\n                            sync,\r\n                            zip,\r\n                            this.path,\r\n                            item.name\r\n                        );\r\n                        break;\r\n                    case LinuxFileType.File:\r\n                        await this.addFile(sync, zip, this.path, item.name);\r\n                        break;\r\n                }\r\n            }\r\n            zip.end();\r\n        } catch (e: any) {\r\n            GLOBAL_STATE.showErrorDialog(e);\r\n        } finally {\r\n            sync.dispose();\r\n        }\r\n    }\r\n\r\n    pushPathQuery = (path: string) => {\r\n        Router.push({ query: { ...Router.query, path } });\r\n    };\r\n\r\n    changeDirectory(path: string) {\r\n        if (this.path === path) {\r\n            return;\r\n        }\r\n\r\n        this.path = path;\r\n\r\n        if (!GLOBAL_STATE.adb) {\r\n            return;\r\n        }\r\n\r\n        this.loadFiles();\r\n    }\r\n\r\n    loadFiles = asyncEffect(async (signal) => {\r\n        const currentPath = this.path;\r\n\r\n        runInAction(() => (this.items = []));\r\n\r\n        if (!GLOBAL_STATE.adb) {\r\n            return;\r\n        }\r\n\r\n        runInAction(() => (this.loading = true));\r\n\r\n        const sync = await GLOBAL_STATE.adb.sync();\r\n\r\n        const items: ListItem[] = [];\r\n        const linkItems: AdbSyncEntry[] = [];\r\n        const intervalId = setInterval(() => {\r\n            if (signal.aborted) {\r\n                return;\r\n            }\r\n\r\n            runInAction(() => (this.items = items.slice()));\r\n        }, 1000);\r\n\r\n        try {\r\n            for await (const entry of sync.opendir(currentPath)) {\r\n                if (signal.aborted) {\r\n                    return;\r\n                }\r\n\r\n                if (entry.name === \".\" || entry.name === \"..\") {\r\n                    continue;\r\n                }\r\n\r\n                if (entry.type === LinuxFileType.Link) {\r\n                    linkItems.push(entry);\r\n                } else {\r\n                    items.push(toListItem(entry));\r\n                }\r\n            }\r\n\r\n            for (const entry of linkItems) {\r\n                if (signal.aborted) {\r\n                    return;\r\n                }\r\n\r\n                if (\r\n                    !(await sync.isDirectory(\r\n                        path.resolve(currentPath, entry.name!)\r\n                    ))\r\n                ) {\r\n                    entry.mode = (LinuxFileType.File << 12) | entry.permission;\r\n                    entry.size = 0n;\r\n                }\r\n\r\n                items.push(toListItem(entry));\r\n            }\r\n\r\n            if (signal.aborted) {\r\n                return;\r\n            }\r\n\r\n            runInAction(() => (this.items = items));\r\n        } finally {\r\n            if (!signal.aborted) {\r\n                runInAction(() => (this.loading = false));\r\n            }\r\n            clearInterval(intervalId);\r\n            sync.dispose();\r\n        }\r\n    });\r\n\r\n    upload = async (file: File) => {\r\n        const sync = await GLOBAL_STATE.adb!.sync();\r\n        try {\r\n            const itemPath = path.resolve(this.path!, file.name);\r\n            runInAction(() => {\r\n                this.uploading = true;\r\n                this.uploadPath = file.name;\r\n                this.uploadedSize = 0;\r\n                this.uploadTotalSize = file.size;\r\n                this.debouncedUploadedSize = 0;\r\n                this.uploadSpeed = 0;\r\n            });\r\n\r\n            const intervalId = setInterval(\r\n                action(() => {\r\n                    this.uploadSpeed =\r\n                        this.uploadedSize - this.debouncedUploadedSize;\r\n                    this.debouncedUploadedSize = this.uploadedSize;\r\n                }),\r\n                1000\r\n            );\r\n\r\n            try {\r\n                const start = Date.now();\r\n\r\n                await sync.write({\r\n                    filename: itemPath,\r\n                    file: createFileStream(file)\r\n                        .pipeThrough(new WrapConsumableStream())\r\n                        .pipeThrough(\r\n                            new ProgressStream(\r\n                                action((uploaded) => {\r\n                                    this.uploadedSize = uploaded;\r\n                                })\r\n                            )\r\n                        ),\r\n                    type: LinuxFileType.File,\r\n                    permission: 0o666,\r\n                    mtime: file.lastModified / 1000,\r\n                });\r\n\r\n                console.log(\r\n                    \"Upload speed:\",\r\n                    (\r\n                        ((file.size / (Date.now() - start)) * 1000) /\r\n                        1024 /\r\n                        1024\r\n                    ).toFixed(2),\r\n                    \"MB/s\"\r\n                );\r\n\r\n                runInAction(() => {\r\n                    this.uploadSpeed =\r\n                        this.uploadedSize - this.debouncedUploadedSize;\r\n                    this.debouncedUploadedSize = this.uploadedSize;\r\n                });\r\n            } finally {\r\n                clearInterval(intervalId);\r\n            }\r\n        } catch (e: any) {\r\n            GLOBAL_STATE.showErrorDialog(e);\r\n        } finally {\r\n            sync.dispose();\r\n            this.loadFiles();\r\n            runInAction(() => {\r\n                this.uploading = false;\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nconst state = new FileManagerState();\r\n\r\nconst UploadDialog = observer(() => {\r\n    return (\r\n        <Dialog\r\n            hidden={!state.uploading}\r\n            dialogContentProps={{\r\n                title: \"Uploading...\",\r\n                subText: state.uploadPath,\r\n            }}\r\n        >\r\n            <ProgressIndicator\r\n                description={formatSpeed(\r\n                    state.debouncedUploadedSize,\r\n                    state.uploadTotalSize,\r\n                    state.uploadSpeed\r\n                )}\r\n                percentComplete={state.uploadedSize / state.uploadTotalSize}\r\n            />\r\n        </Dialog>\r\n    );\r\n});\r\n\r\nconst FileManager: NextPage = (): JSX.Element | null => {\r\n    useEffect(() => {\r\n        runInAction(() => {\r\n            state.visible = true;\r\n        });\r\n\r\n        return () => {\r\n            runInAction(() => {\r\n                state.visible = false;\r\n            });\r\n        };\r\n    });\r\n\r\n    const router = useRouter();\r\n    useEffect(() => {\r\n        let pathQuery = router.query.path;\r\n        if (!pathQuery) {\r\n            router.replace({ query: { ...router.query, path: state.path } });\r\n            return;\r\n        }\r\n\r\n        if (Array.isArray(pathQuery)) {\r\n            pathQuery = pathQuery[0];\r\n        }\r\n\r\n        state.changeDirectory(pathQuery);\r\n    }, [router]);\r\n\r\n    const [previewUrl, setPreviewUrl] = useState<string | undefined>();\r\n    const previewImage = useCallback(async (path: string) => {\r\n        const sync = await GLOBAL_STATE.adb!.sync();\r\n        try {\r\n            const readable = sync.read(path);\r\n            // @ts-ignore ReadableStream definitions are slightly incompatible\r\n            const response = new Response(readable);\r\n            const blob = await response.blob();\r\n            const url = globalThis.URL.createObjectURL(blob);\r\n            setPreviewUrl(url);\r\n        } finally {\r\n            sync.dispose();\r\n        }\r\n    }, []);\r\n    const hidePreview = useCallback(() => {\r\n        setPreviewUrl(undefined);\r\n    }, []);\r\n\r\n    const handleItemInvoked = useCallback(\r\n        (item: AdbSyncEntry) => {\r\n            switch (item.type) {\r\n                case LinuxFileType.Link:\r\n                case LinuxFileType.Directory:\r\n                    state.pushPathQuery(path.resolve(state.path!, item.name!));\r\n                    break;\r\n                case LinuxFileType.File:\r\n                    switch (path.extname(item.name!)) {\r\n                        case \".jpg\":\r\n                        case \".png\":\r\n                        case \".svg\":\r\n                        case \".gif\":\r\n                            previewImage(path.resolve(state.path!, item.name!));\r\n                            break;\r\n                    }\r\n                    break;\r\n            }\r\n        },\r\n        [previewImage]\r\n    );\r\n\r\n    const selection = useConst(\r\n        () =>\r\n            new Selection({\r\n                onSelectionChanged() {\r\n                    runInAction(() => {\r\n                        state.selectedItems =\r\n                            selection.getSelection() as ListItem[];\r\n                    });\r\n                },\r\n            })\r\n    );\r\n\r\n    const showContextMenu = useCallback(\r\n        (item?: AdbSyncEntry, index?: number, e?: Event) => {\r\n            if (!e) {\r\n                return false;\r\n            }\r\n\r\n            if (state.menuItems.length) {\r\n                runInAction(() => {\r\n                    state.contextMenuTarget = e as MouseEvent;\r\n                });\r\n            }\r\n\r\n            return false;\r\n        },\r\n        []\r\n    );\r\n    const hideContextMenu = useCallback(() => {\r\n        runInAction(() => (state.contextMenuTarget = undefined));\r\n    }, []);\r\n\r\n    return (\r\n        <Stack {...RouteStackProps}>\r\n            <Head>\r\n                <title>File Manager - Tango</title>\r\n            </Head>\r\n\r\n            <CommandBar items={state.menuItems} />\r\n\r\n            <Breadcrumb items={state.breadcrumbItems} />\r\n\r\n            <StackItem\r\n                grow\r\n                styles={{\r\n                    root: {\r\n                        margin: \"-8px -16px -16px -16px\",\r\n                        padding: \"8px 16px 16px 16px\",\r\n                        overflowY: \"auto\",\r\n                    },\r\n                }}\r\n            >\r\n                <MarqueeSelection selection={selection}>\r\n                    <ShimmeredDetailsList\r\n                        items={state.sortedList}\r\n                        columns={state.columns}\r\n                        setKey={state.path}\r\n                        selection={selection}\r\n                        layoutMode={DetailsListLayoutMode.justified}\r\n                        enableShimmer={\r\n                            state.loading && state.items.length === 0\r\n                        }\r\n                        onItemInvoked={handleItemInvoked}\r\n                        onItemContextMenu={showContextMenu}\r\n                        onRenderDetailsHeader={renderDetailsHeader}\r\n                        usePageCache\r\n                        useReducedRowRenderer\r\n                    />\r\n                </MarqueeSelection>\r\n\r\n                {previewUrl && (\r\n                    <Layer>\r\n                        <Overlay onClick={hidePreview}>\r\n                            <div\r\n                                style={{\r\n                                    width: \"100%\",\r\n                                    height: \"100%\",\r\n                                    display: \"flex\",\r\n                                    alignItems: \"center\",\r\n                                    justifyContent: \"center\",\r\n                                }}\r\n                            >\r\n                                {/* eslint-disable-next-line @next/next/no-img-element */}\r\n                                <img\r\n                                    src={previewUrl}\r\n                                    alt=\"\"\r\n                                    style={{\r\n                                        maxWidth: \"100%\",\r\n                                        maxHeight: \"100%\",\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </Overlay>\r\n                    </Layer>\r\n                )}\r\n            </StackItem>\r\n\r\n            <NoSsr>\r\n                <ContextualMenu\r\n                    items={state.menuItems}\r\n                    hidden={!state.contextMenuTarget}\r\n                    directionalHint={DirectionalHint.bottomLeftEdge}\r\n                    target={state.contextMenuTarget}\r\n                    onDismiss={hideContextMenu}\r\n                    contextualMenuItemAs={(props) => (\r\n                        <ContextualMenuItem {...props} hasIcons={false} />\r\n                    )}\r\n                />\r\n            </NoSsr>\r\n\r\n            <UploadDialog />\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default observer(FileManager);\r\n"],"names":["window","__NEXT_P","push","__webpack_require__","toListItem","item","key","name","initializeFileTypeIcons","classNames","mergeStyleSets","cursor","textDecoration","renderDetailsHeader","props","defaultRender","styles","concatStyleSets","root","paddingTop","compareCaseInsensitively","a","b","result","toLocaleLowerCase","localeCompare","state","breadcrumbItems","part","list","path","split","filter","Boolean","map","segment","text","onClick","e","pushPathQuery","unshift","length","isCurrentItem","menuItems","selectedItems","iconProps","iconName","Icons","style","height","fontSize","lineHeight","disabled","GLOBAL_STATE","files","pickFile","multiple","i","file","upload","download","output","loadFiles","sortedList","items","slice","sort","aIsFile","type","LinuxFileType","bIsFile","aSortKey","sortKey","bSortKey","sortDescending","columns","isIconOnly","minWidth","maxWidth","isCollapsible","onRender","getFileTypeIconProps","FileIconType","extension","iconSrc","_fluentui_style_utilities__WEBPACK_IMPORTED_MODULE_1__","q7","code","src","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","Icon","imageProps","crossOrigin","width","isRowHeader","span","className","data-selection-invoke","concat","mode","toString","formatSize","Number","size","Date","mtime","toLocaleString","supportsFeature","AdbFeature","ctime","atime","onColumnClick","column","runInAction","isSorted","isSortedDescending","getFileStream","sync","basePath","read","addDirectory","zip","relativePath","ZipPassThrough","add","EMPTY_UINT8_ARRAY","entry","readdir","addFile","pipeTo","WritableStream","write","chunk","close","stream","saveFile","writer","getWriter","Zip","err","data","final","end","dispose","changeDirectory","constructor","initial","visible","loading","uploading","uploadPath","undefined","uploadedSize","uploadTotalSize","debouncedUploadedSize","uploadSpeed","contextMenuTarget","Router","query","asyncEffect","signal","currentPath","linkItems","intervalId","setInterval","aborted","opendir","isDirectory","_yume_chan_adb__WEBPACK_IMPORTED_MODULE_2__","File","permission","clearInterval","itemPath","action","start","now","filename","createFileStream","pipeThrough","WrapConsumableStream","ProgressStream","uploaded","lastModified","console","log","toFixed","makeAutoObservable","observable","autorun","UploadDialog","observer","Dialog","hidden","dialogContentProps","title","subText","ProgressIndicator","description","formatSpeed","percentComplete","FileManager","useEffect","router","useRouter","pathQuery","replace","isArray","previewUrl","setPreviewUrl","useState","previewImage","useCallback","readable","response","Response","blob","url","globalThis","URL","createObjectURL","hidePreview","handleItemInvoked","selection","useConst","Selection","onSelectionChanged","getSelection","showContextMenu","index","hideContextMenu","jsxs","Stack","RouteStackProps","Head","CommandBar","Breadcrumb","StackItem","grow","margin","padding","overflowY","MarqueeSelection","ShimmeredDetailsList","setKey","layoutMode","DetailsListLayoutMode","enableShimmer","onItemInvoked","onItemContextMenu","onRenderDetailsHeader","usePageCache","useReducedRowRenderer","Layer","Overlay","div","display","alignItems","justifyContent","img","alt","maxHeight","NoSsr","ContextualMenu","directionalHint","DirectionalHint","target","onDismiss","contextualMenuItemAs","ContextualMenuItem","hasIcons","__webpack_exports__"],"sourceRoot":""}