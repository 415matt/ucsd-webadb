{"version":3,"file":"static/chunks/126-15e989f7f9d4f99f.js","mappings":"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","sources":["webpack://_N_E/../../libraries/aoa/src/type.ts","webpack://_N_E/../../libraries/aoa/src/audio.ts","webpack://_N_E/../../libraries/aoa/src/filter.ts","webpack://_N_E/../../libraries/aoa/src/hid.ts","webpack://_N_E/../../libraries/aoa/src/initialize.ts","webpack://_N_E/../../libraries/aoa/src/keyboard.ts","webpack://_N_E/../../libraries/aoa/src/mouse.ts","webpack://_N_E/../../libraries/aoa/src/index.ts","webpack://_N_E/<anon>"],"sourcesContent":["export enum AoaRequestType {\r\n    GetProtocol = 51,\r\n    SendString,\r\n    Start,\r\n    RegisterHid,\r\n    UnregisterHid,\r\n    SetHidReportDescriptor,\r\n    SendHidEvent,\r\n    SetAudioMode,\r\n}\r\n","import { AoaRequestType } from \"./type.js\";\r\n\r\n// The original plan is to add more audio modes,\r\n// but AOA audio accessory mode is soon deprecated in Android 8.\r\nexport enum AoaAudioMode {\r\n    Off,\r\n    /**\r\n     * 2 channel, 16 bit, 44.1KHz PCM\r\n     */\r\n    On,\r\n}\r\n\r\n/**\r\n * Sets the audio mode. This method must be called before {@link aoaStartAccessory}.\r\n *\r\n * AOA audio accessory mode turns the Android device into a USB microphone,\r\n * all system audio will be directed to the microphone, to be capture by the USB host.\r\n *\r\n * It's like connecting a audio cable between the Android headphone jack and PC microphone jack,\r\n * except all signals are digital.\r\n *\r\n * Audio mode is deprecated in Android 8. On Android 9 and later, this call still switches the device\r\n * to audio accessory mode, and the device will be recognized as a USB microphone, but the\r\n * required USB endpoint is not presented anymore.\r\n * @param device The Android device.\r\n * @param mode The audio mode.\r\n */\r\nexport async function aoaSetAudioMode(device: USBDevice, mode: AoaAudioMode) {\r\n    await device.controlTransferOut(\r\n        {\r\n            recipient: \"device\",\r\n            requestType: \"vendor\",\r\n            request: AoaRequestType.SetAudioMode,\r\n            value: mode,\r\n            index: 0,\r\n        },\r\n        new ArrayBuffer(0)\r\n    );\r\n}\r\n\r\nfunction findAudioStreamingInterface(device: USBDevice) {\r\n    for (const configuration of device.configurations) {\r\n        for (const interface_ of configuration.interfaces) {\r\n            for (const alternate of interface_.alternates) {\r\n                // Audio\r\n                if (alternate.interfaceClass !== 0x01) {\r\n                    continue;\r\n                }\r\n                // AudioStreaming\r\n                if (alternate.interfaceSubclass !== 0x02) {\r\n                    continue;\r\n                }\r\n                if (alternate.endpoints.length === 0) {\r\n                    continue;\r\n                }\r\n                return { configuration, interface_, alternate };\r\n            }\r\n        }\r\n    }\r\n\r\n    throw new Error(\"No matched alternate interface found\");\r\n}\r\n\r\n/**\r\n * It doesn't work on Web, because Chrome blocked audio devices from WebUSB API.\r\n * @param device The Android device.\r\n * @returns A readable stream of raw audio data.\r\n */\r\nexport function aoaGetAudioStream(device: USBDevice) {\r\n    let endpointNumber!: number;\r\n    return new ReadableStream<Uint8Array>({\r\n        async start() {\r\n            const { configuration, interface_, alternate } =\r\n                findAudioStreamingInterface(device);\r\n\r\n            if (\r\n                device.configuration?.configurationValue !==\r\n                configuration.configurationValue\r\n            ) {\r\n                await device.selectConfiguration(\r\n                    configuration.configurationValue\r\n                );\r\n            }\r\n\r\n            if (!interface_.claimed) {\r\n                await device.claimInterface(interface_.interfaceNumber);\r\n            }\r\n\r\n            if (\r\n                interface_.alternate.alternateSetting !==\r\n                alternate.alternateSetting\r\n            ) {\r\n                await device.selectAlternateInterface(\r\n                    interface_.interfaceNumber,\r\n                    alternate.alternateSetting\r\n                );\r\n            }\r\n\r\n            const endpoint = alternate.endpoints.find(\r\n                (endpoint) =>\r\n                    endpoint.type === \"isochronous\" &&\r\n                    endpoint.direction === \"in\"\r\n            );\r\n            if (!endpoint) {\r\n                throw new Error(\"No matched endpoint found\");\r\n            }\r\n\r\n            endpointNumber = endpoint.endpointNumber;\r\n        },\r\n        async pull(controller) {\r\n            const result = await device.isochronousTransferIn(endpointNumber, [\r\n                1024,\r\n            ]);\r\n            for (const packet of result.packets) {\r\n                const data = packet.data!;\r\n                const array = new Uint8Array(\r\n                    data.buffer,\r\n                    data.byteOffset,\r\n                    data.byteLength\r\n                );\r\n                controller.enqueue(array);\r\n            }\r\n        },\r\n    });\r\n}\r\n","export const AOA_DEFAULT_DEVICE_FILTERS = [\r\n    {\r\n        vendorId: 0x18d1,\r\n        // accessory\r\n        productId: 0x2d00,\r\n    },\r\n    {\r\n        vendorId: 0x18d1,\r\n        // accessory + adb\r\n        productId: 0x2d01,\r\n    },\r\n] as const satisfies readonly USBDeviceFilter[];\r\n","import { AoaRequestType } from \"./type.js\";\r\n\r\nexport async function aoaHidRegister(\r\n    device: USBDevice,\r\n    accessoryId: number,\r\n    reportDescriptorSize: number\r\n) {\r\n    await device.controlTransferOut(\r\n        {\r\n            recipient: \"device\",\r\n            requestType: \"vendor\",\r\n            request: AoaRequestType.RegisterHid,\r\n            value: accessoryId,\r\n            index: reportDescriptorSize,\r\n        },\r\n        new ArrayBuffer(0)\r\n    );\r\n}\r\n\r\nexport async function aoaHidSetReportDescriptor(\r\n    device: USBDevice,\r\n    accessoryId: number,\r\n    reportDescriptor: Uint8Array\r\n) {\r\n    await device.controlTransferOut(\r\n        {\r\n            recipient: \"device\",\r\n            requestType: \"vendor\",\r\n            request: AoaRequestType.SetHidReportDescriptor,\r\n            value: accessoryId,\r\n            index: 0,\r\n        },\r\n        reportDescriptor\r\n    );\r\n}\r\n\r\nexport async function aoaHidUnregister(device: USBDevice, accessoryId: number) {\r\n    await device.controlTransferOut(\r\n        {\r\n            recipient: \"device\",\r\n            requestType: \"vendor\",\r\n            request: AoaRequestType.UnregisterHid,\r\n            value: accessoryId,\r\n            index: 0,\r\n        },\r\n        new ArrayBuffer(0)\r\n    );\r\n}\r\n\r\nexport async function aoaHidSendInputReport(\r\n    device: USBDevice,\r\n    accessoryId: number,\r\n    event: Uint8Array\r\n) {\r\n    await device.controlTransferOut(\r\n        {\r\n            recipient: \"device\",\r\n            requestType: \"vendor\",\r\n            request: AoaRequestType.SendHidEvent,\r\n            value: accessoryId,\r\n            index: 0,\r\n        },\r\n        event\r\n    );\r\n}\r\n\r\n/**\r\n * Emulate a HID device over AOA protocol.\r\n *\r\n * It can only send input reports, but not send feature reports nor receive output reports.\r\n */\r\nexport class AoaHidDevice {\r\n    /**\r\n     * Register a HID device.\r\n     * @param device The Android device.\r\n     * @param accessoryId An arbitrary number to uniquely identify the HID device.\r\n     * @param reportDescriptor The HID report descriptor.\r\n     * @returns An instance of AoaHidDevice to send events.\r\n     */\r\n    public static async register(\r\n        device: USBDevice,\r\n        accessoryId: number,\r\n        reportDescriptor: Uint8Array\r\n    ) {\r\n        await aoaHidRegister(device, accessoryId, reportDescriptor.length);\r\n        await aoaHidSetReportDescriptor(device, accessoryId, reportDescriptor);\r\n        return new AoaHidDevice(device, accessoryId);\r\n    }\r\n\r\n    private _device: USBDevice;\r\n    private _accessoryId: number;\r\n\r\n    private constructor(device: USBDevice, accessoryId: number) {\r\n        this._device = device;\r\n        this._accessoryId = accessoryId;\r\n    }\r\n\r\n    public async sendInputReport(event: Uint8Array) {\r\n        await aoaHidSendInputReport(this._device, this._accessoryId, event);\r\n    }\r\n\r\n    public async unregister() {\r\n        await aoaHidUnregister(this._device, this._accessoryId);\r\n    }\r\n}\r\n","import { AoaRequestType } from \"./type.js\";\r\n\r\nexport async function aoaGetProtocol(device: USBDevice) {\r\n    const result = await device.controlTransferIn(\r\n        {\r\n            recipient: \"device\",\r\n            requestType: \"vendor\",\r\n            request: AoaRequestType.GetProtocol,\r\n            value: 0,\r\n            index: 0,\r\n        },\r\n        2\r\n    );\r\n    const version = result.data!.getUint16(0, true);\r\n    return version;\r\n}\r\n\r\n/**\r\n * The device will reset (disconnect) after this call.\r\n * @param device The Android device.\r\n */\r\nexport async function aoaStartAccessory(device: USBDevice) {\r\n    await device.controlTransferOut(\r\n        {\r\n            recipient: \"device\",\r\n            requestType: \"vendor\",\r\n            request: AoaRequestType.Start,\r\n            value: 0,\r\n            index: 0,\r\n        },\r\n        new ArrayBuffer(0)\r\n    );\r\n}\r\n","// cspell:ignore Oper\r\n\r\n// Most names follow Web API `KeyboardEvent.code`,\r\nexport enum HidKeyCode {\r\n    KeyA = 4,\r\n    KeyB,\r\n    KeyC,\r\n    KeyD,\r\n    KeyE,\r\n    KeyF,\r\n    KeyG,\r\n    KeyH,\r\n    KeyI,\r\n    KeyJ,\r\n    KeyK,\r\n    KeyL,\r\n    KeyM,\r\n    KeyN,\r\n    KeyO,\r\n    KeyP,\r\n    KeyQ,\r\n    KeyR,\r\n    KeyS,\r\n    KeyT,\r\n    KeyU,\r\n    KeyV,\r\n    KeyW,\r\n    KeyX,\r\n    KeyY,\r\n    KeyZ,\r\n    Digit1,\r\n    Digit2,\r\n    Digit3,\r\n    Digit4,\r\n    Digit5,\r\n    Digit6,\r\n    Digit7,\r\n    Digit8,\r\n    Digit9,\r\n    Digit0,\r\n    Enter,\r\n    Escape,\r\n    Backspace,\r\n    Tab,\r\n    Space,\r\n    Minus,\r\n    Equal,\r\n    BracketLeft,\r\n    BracketRight,\r\n    Backslash,\r\n    NonUsHash,\r\n    Semicolon,\r\n    Quote,\r\n    Backquote,\r\n    Comma,\r\n    Period,\r\n    Slash,\r\n    CapsLock,\r\n    F1,\r\n    F2,\r\n    F3,\r\n    F4,\r\n    F5,\r\n    F6,\r\n    F7,\r\n    F8,\r\n    F9,\r\n    F10,\r\n    F11,\r\n    F12,\r\n    PrintScreen,\r\n    ScrollLock,\r\n    Pause,\r\n    Insert,\r\n    Home,\r\n    PageUp,\r\n    Delete,\r\n    End,\r\n    PageDown,\r\n    ArrowRight,\r\n    ArrowLeft,\r\n    ArrowDown,\r\n    ArrowUp,\r\n    NumLock,\r\n    NumpadDivide,\r\n    NumpadMultiply,\r\n    NumpadSubtract,\r\n    NumpadAdd,\r\n    NumpadEnter,\r\n    Numpad1,\r\n    Numpad2,\r\n    Numpad3,\r\n    Numpad4,\r\n    Numpad5,\r\n    Numpad6,\r\n    Numpad7,\r\n    Numpad8,\r\n    Numpad9,\r\n    Numpad0,\r\n    NumpadDecimal,\r\n    NonUsBackslash,\r\n    ContextMenu,\r\n    Power,\r\n    NumpadEqual,\r\n    F13,\r\n    F14,\r\n    F15,\r\n    F16,\r\n    F17,\r\n    F18,\r\n    F19,\r\n    F20,\r\n    F21,\r\n    F22,\r\n    F23,\r\n    F24,\r\n\r\n    Execute,\r\n    Help,\r\n    Menu,\r\n    Select,\r\n    Stop,\r\n    Again,\r\n    Undo,\r\n    Cut,\r\n    Copy,\r\n    Paste,\r\n    Find,\r\n    Mute,\r\n    VolumeUp,\r\n    VolumeDown,\r\n    LockingCapsLock,\r\n    LockingNumLock,\r\n    LockingScrollLock,\r\n    NumpadComma,\r\n    KeypadEqualSign,\r\n    International1,\r\n    International2,\r\n    International3,\r\n    International4,\r\n    International5,\r\n    International6,\r\n    International7,\r\n    International8,\r\n    International9,\r\n    Lang1,\r\n    Lang2,\r\n    Lang3,\r\n    Lang4,\r\n    Lang5,\r\n    Lang6,\r\n    Lang7,\r\n    Lang8,\r\n    Lang9,\r\n    AlternateErase,\r\n    SysReq,\r\n    Cancel,\r\n    Clear,\r\n    Prior,\r\n    Return2,\r\n    Separator,\r\n    Out,\r\n    Oper,\r\n    ClearAgain,\r\n    CrSel,\r\n    ExSel,\r\n\r\n    Keypad00 = 0xb0,\r\n    Keypad000,\r\n    ThousandsSeparator,\r\n    DecimalSeparator,\r\n    CurrencyUnit,\r\n    CurrencySubUnit,\r\n    KeypadLeftParen,\r\n    KeypadRightParen,\r\n    KeypadLeftBrace,\r\n    KeypadRightBrace,\r\n    KeypadTab,\r\n    KeypadBackspace,\r\n    KeypadA,\r\n    KeypadB,\r\n    KeypadC,\r\n    KeypadD,\r\n    KeypadE,\r\n    KeypadF,\r\n    KeypadXor,\r\n    KeypadPower,\r\n    KeypadPercent,\r\n    KeypadLess,\r\n    KeypadGreater,\r\n    KeypadAmpersand,\r\n    KeypadDblAmpersand,\r\n    KeypadVerticalBar,\r\n    KeypadDblVerticalBar,\r\n    KeypadColon,\r\n    KeypadHash,\r\n    KeypadSpace,\r\n    KeypadAt,\r\n    KeypadExclamation,\r\n    KeypadMemStore,\r\n    KeypadMemRecall,\r\n    KeypadMemClear,\r\n    KeypadMemAdd,\r\n    KeypadMemSubtract,\r\n    KeypadMemMultiply,\r\n    KeypadMemDivide,\r\n    KeypadPlusMinus,\r\n    KeypadClear,\r\n    KeypadClearEntry,\r\n    KeypadBinary,\r\n    KeypadOctal,\r\n    KeypadDecimal,\r\n    KeypadHexadecimal,\r\n\r\n    ControlLeft = 0xe0,\r\n    ShiftLeft,\r\n    AltLeft,\r\n    MetaLeft,\r\n    ControlRight,\r\n    ShiftRight,\r\n    AltRight,\r\n    MetaRight,\r\n}\r\n\r\nexport class HidKeyboard {\r\n    /**\r\n     * A HID Keyboard Report Descriptor.\r\n     *\r\n     * It's compatible with the legacy boot protocol. (1 byte modifier, 1 byte reserved, 6 bytes key codes).\r\n     * Technically it doesn't need to be compatible with the legacy boot protocol, but it's the most common implementation.\r\n     */\r\n    public static readonly DESCRIPTOR = new Uint8Array(\r\n        // prettier-ignore\r\n        [\r\n            0x05, 0x01, // Usage Page (Generic Desktop)\r\n            0x09, 0x06, // Usage (Keyboard)\r\n            0xa1, 0x01, // Collection (Application)\r\n            0x05, 0x07, //    Usage Page (Keyboard)\r\n            0x19, 0xe0, //    Usage Minimum (Keyboard Left Control)\r\n            0x29, 0xe7, //    Usage Maximum (Keyboard Right GUI)\r\n            0x15, 0x00, //    Logical Minimum (0)\r\n            0x25, 0x01, //    Logical Maximum (1)\r\n            0x75, 0x01, //    Report Size (1)\r\n            0x95, 0x08, //    Report Count (8)\r\n            0x81, 0x02, //    Input (Data, Variable, Absolute)\r\n\r\n            0x75, 0x08, //    Report Size (8)\r\n            0x95, 0x01, //    Report Count (1)\r\n            0x81, 0x01, //    Input (Constant)\r\n\r\n            0x05, 0x08, //    Usage Page (LEDs)\r\n            0x19, 0x01, //    Usage Minimum (Num Lock)\r\n            0x29, 0x05, //    Usage Maximum (Kana)\r\n            0x75, 0x01, //    Report Size (1)\r\n            0x95, 0x05, //    Report Count (5)\r\n            0x91, 0x02, //    Output (Data, Variable, Absolute)\r\n\r\n            0x75, 0x03, //    Report Size (3)\r\n            0x95, 0x01, //    Report Count (1)\r\n            0x91, 0x01, //    Output (Constant)\r\n\r\n            0x05, 0x07, //    Usage Page (Keyboard)\r\n            0x19, 0x00, //    Usage Minimum (Reserved (no event indicated))\r\n            0x29, 0xdd, //    Usage Maximum (Keyboard Application)\r\n            0x15, 0x00, //    Logical Minimum (0)\r\n            0x25, 0xdd, //    Logical Maximum (221)\r\n            0x75, 0x08, //    Report Size (8)\r\n            0x95, 0x06, //    Report Count (6)\r\n            0x81, 0x00, //    Input (Data, Array)\r\n            0xc0        // End Collection\r\n        ]\r\n    );\r\n\r\n    private _modifiers = 0;\r\n    private _keys: Set<HidKeyCode> = new Set();\r\n\r\n    public down(key: HidKeyCode) {\r\n        if (key >= HidKeyCode.ControlLeft && key <= HidKeyCode.MetaRight) {\r\n            this._modifiers |= 1 << (key - HidKeyCode.ControlLeft);\r\n        } else {\r\n            this._keys.add(key);\r\n        }\r\n    }\r\n\r\n    public up(key: HidKeyCode) {\r\n        if (key >= HidKeyCode.ControlLeft && key <= HidKeyCode.MetaRight) {\r\n            this._modifiers &= ~(1 << (key - HidKeyCode.ControlLeft));\r\n        } else {\r\n            this._keys.delete(key);\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this._modifiers = 0;\r\n        this._keys.clear();\r\n    }\r\n\r\n    public serializeInputReport() {\r\n        const buffer = new Uint8Array(8);\r\n        buffer[0] = this._modifiers;\r\n        let i = 2;\r\n        for (const key of this._keys) {\r\n            buffer[i] = key;\r\n            i += 1;\r\n            if (i >= 8) {\r\n                break;\r\n            }\r\n        }\r\n        return buffer;\r\n    }\r\n}\r\n","export class HidMouse {\r\n    public static readonly descriptor = new Uint8Array(\r\n        // prettier-ignore\r\n        [\r\n            0x05, 0x01,       // Usage Page (Generic Desktop)\r\n            0x09, 0x02,       // Usage (Mouse)\r\n            0xa1, 0x01,       // Collection (Application)\r\n            0x09, 0x01,       //     Usage (Pointer)\r\n            0xa1, 0x00,       //     Collection (Physical)\r\n            0x05, 0x09,       //         Usage Page (Button)\r\n            0x19, 0x01,       //         Usage Minimum (Button 1)\r\n            0x29, 0x05,       //         Usage Maximum (Button 5)\r\n            0x15, 0x00,       //         Logical Minimum (0)\r\n            0x25, 0x01,       //         Logical Maximum (1)\r\n            0x75, 0x01,       //         Report Size (1)\r\n            0x95, 0x05,       //         Report Count (5)\r\n            0x81, 0x02,       //         Input (Data, Variable, Absolute)\r\n\r\n            0x75, 0x03,       //         Report Size (3)\r\n            0x95, 0x01,       //         Report Count (1)\r\n            0x81, 0x01,       //         Input (Constant)\r\n\r\n            0x05, 0x01,       //         Usage Page (Generic Desktop)\r\n            0x09, 0x30,       //         Usage (X)\r\n            0x09, 0x31,       //         Usage (Y)\r\n            0x09, 0x38,       //         Usage (Wheel)\r\n            0x15, 0x81,       //         Logical Minimum (-127)\r\n            0x25, 0x7f,       //         Logical Maximum (127)\r\n            0x75, 0x08,       //         Report Size (8)\r\n            0x95, 0x03,       //         Report Count (3)\r\n            0x81, 0x06,       //         Input (Data, Variable, Relative)\r\n\r\n            0x05, 0x0C,       //         Usage Page (Consumer)\r\n            0x0A, 0x38, 0x02, //         Usage (AC Pan)\r\n            0x15, 0x81,       //         Logical Minimum (-127)\r\n            0x25, 0x7f,       //         Logical Maximum (127)\r\n            0x75, 0x08,       //         Report Size (8)\r\n            0x95, 0x01,       //         Report Count (1)\r\n            0x81, 0x06,       //         Input (Data, Variable, Relative)\r\n            0xc0,             //     End Collection\r\n            0xc0,             // End Collection\r\n        ]\r\n    );\r\n\r\n    public static serializeInputReport(\r\n        movementX: number,\r\n        movementY: number,\r\n        buttons: number,\r\n        scrollX: number,\r\n        scrollY: number\r\n    ): Uint8Array {\r\n        return new Uint8Array([\r\n            buttons,\r\n            movementX,\r\n            movementY,\r\n            scrollY,\r\n            scrollX,\r\n        ]);\r\n    }\r\n}\r\n","export * from \"./audio.js\";\r\nexport * from \"./filter.js\";\r\nexport * from \"./hid.js\";\r\nexport * from \"./initialize.js\";\r\nexport * from \"./keyboard.js\";\r\nexport * from \"./mouse.js\";\r\nexport * from \"./type.js\";\r\n"],"names":["AoaRequestType","AoaAudioMode","HidKeyCode","aoaSetAudioMode","device","mode","controlTransferOut","recipient","requestType","request","SetAudioMode","value","index","ArrayBuffer","aoaHidRegister","accessoryId","reportDescriptorSize","RegisterHid","aoaHidSetReportDescriptor","reportDescriptor","SetHidReportDescriptor","aoaHidUnregister","UnregisterHid","aoaHidSendInputReport","event","SendHidEvent","AoaHidDevice","register","length","_device","_accessoryId","sendInputReport","unregister","aoaGetProtocol","result","controlTransferIn","GetProtocol","version","data","getUint16","aoaStartAccessory","Start","HidKeyboard","DESCRIPTOR","Uint8Array","_modifiers","_keys","Set","down","key","ControlLeft","MetaRight","add","up","delete","reset","clear","serializeInputReport","buffer","i","HidMouse","descriptor","movementX","movementY","buttons","scrollX","scrollY"],"sourceRoot":""}